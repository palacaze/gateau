# template package file for single header libs

# find the first provided header and create an imported target
macro(@SOCUTE_PACKAGE_MODULE_NAME@_find name)
    set(_header_url @SOCUTE_PACKAGE_MODULE_SINGLE_HEADER_FILE@)
    set(_header_dir ${name})

    include(FindPackageHandleStandardArgs)

    # look for the header
    get_filename_component(_header_name ${_header_url} NAME)

    # find_path caches its result, so we must ensure the header really exists
    # and clear the cache otherwise
    if (DEFINED ${name}_INCLUDE_DIR AND NOT EXISTS "${${name}_INCLUDE_DIR}/${_header_dir}/${_header_name}")
        unset(${name}_INCLUDE_DIR CACHE)
    endif()

    find_path(${name}_INCLUDE_DIR NAMES ${_header_name} PATH_SUFFIXES ${_header_dir})

    find_package_handle_standard_args(
        ${name} DEFAULT_MSG ${name}_INCLUDE_DIR)

    # rewind once to move out of the expected subdir
    if(${name}_FOUND)
        get_filename_component(${name}_INCLUDE_DIR
            "${${name}_INCLUDE_DIR}/.." ABSOLUTE)
    endif()

    mark_as_advanced(${name}_INCLUDE_DIR)

    # create an imported target
    if(${name}_FOUND AND NOT TARGET ${name}::${name})
        add_library(${name}::${name} INTERFACE IMPORTED)
        set_target_properties(${name}::${name} PROPERTIES
            INTERFACE_INCLUDE_DIRECTORIES "${${name}_INCLUDE_DIR}")
    endif()

    unset(_header_url)
    unset(_header_dir)
    unset(_header_name)
endmacro()

# install headers for this dep
macro(@SOCUTE_PACKAGE_MODULE_NAME@_install name)
    set(_header_url @SOCUTE_PACKAGE_MODULE_SINGLE_HEADER_FILE@)
    set(_header_dir ${name})
    set(_install_dest "include/${_header_dir}")

    # call to external project, which installs the dep
    socute_install_dependency(${name}
        URL ${_header_url}
        NO_EXTRACT
        NO_UPDATE
        NO_PATCH
        NO_CONFIGURE
        NO_BUILD
        INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory "<INSTALL_DIR>/${_install_dest}"
                COMMAND ${CMAKE_COMMAND} -E copy "<DOWNLOADED_FILE>" "<INSTALL_DIR>/${_install_dest}"
    )

    # create a manifest with the installed files for later uninstallation
    get_filename_component(_header_name ${_header_url} NAME)
    socute_create_install_manifest(${name}
        "${_install_dest}/${_header_name}"
    )

    unset(_header_url)
    unset(_header_dir)
    unset(_install_dest)
endmacro()
